import { ArgumentNode, DecoratorNode, LiteralNode } from '@neuledge/states-parser';
import z from 'zod';
export type Decorators<T> = Record<string, Decorator<T>>;
export type Decorator<T> = (target: T, args: DecoratorNode) => void;
export declare const createDecorator: <T, A extends z.AnyZodObject>(decoratorArgs: A, decorator: (target: T, args: z.TypeOf<A>, argNodes: Record<string, ArgumentNode<LiteralNode>>, node: DecoratorNode) => void | T) => Decorator<T>;
export declare const applyDecorators: <T>(target: T, nodes: DecoratorNode[], decorators: Decorators<T>) => void;
//# sourceMappingURL=decorators.d.ts.map