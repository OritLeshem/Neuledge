import { StatesContext } from './context';
import { Type } from './type';
import { ParameterNode } from '@neuledge/states-parser';
import { Either } from './either';
import { State } from './state';
export interface ParametersContext {
    this: State | Either | null;
    parameters: Record<string, Parameter>;
}
export interface Parameter {
    type: 'Parameter';
    node: ParameterNode;
    name: string;
    description?: string;
    deprecated?: boolean | string;
    nullable: boolean;
    as: Type;
}
export declare const parseParametersContext: (ctx: StatesContext, target: State | Either | null, nodes: ParameterNode[]) => ParametersContext;
export declare const parseParameters: (ctx: StatesContext, nodes: ParameterNode[]) => Record<string, Parameter>;
//# sourceMappingURL=parameter.d.ts.map