import { StatesContext } from '../context';
import { MutationNode } from '@neuledge/states-parser';
import { ParametersContext, Parameter } from '../parameter';
import { Property } from '../property';
import { State } from '../state';
import { Either } from '../either';
import { Void } from '../void';
export interface Mutation extends ParametersContext {
    type: 'Mutation';
    node: MutationNode;
    name: string;
    mutation: 'create' | 'update' | 'delete';
    description?: string;
    deprecated?: boolean | string;
    target: State | Either;
    returns: State | Either | typeof Void;
    parameters: Record<string, Parameter>;
    body: Record<string, Property>;
}
export declare const parseMutation: (ctx: StatesContext, node: MutationNode) => Mutation;
//# sourceMappingURL=index.d.ts.map