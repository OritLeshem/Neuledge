import { IdentifierNode } from '@neuledge/states-parser';
import { Either } from './either';
import { StatesContext } from './index';
import { CustomScalar, Scalar } from './scalar';
import { State } from './state';
import { Void } from './void';
export type Entity<N extends string = string> = NonNullableEntity<N> | ((typeof Void)['name'] extends N ? typeof Void : never);
export type NonNullableEntity<N extends string = string> = Either<N> | State<N> | (Scalar & {
    name: N;
}) | CustomScalar<N>;
export declare const parseEntity: (ctx: StatesContext, node: IdentifierNode) => Entity;
export declare const parseNonNullableEntity: (ctx: StatesContext, node: IdentifierNode) => NonNullableEntity;
//# sourceMappingURL=entity.d.ts.map