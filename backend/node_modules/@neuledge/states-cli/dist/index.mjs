var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// src/index.ts
import { Command } from "commander";
import { readFileSync } from "node:fs";

// src/generate.ts
import fs from "node:fs/promises";
import { resolve } from "node:path";
import fg from "fast-glob";
import { StatesContext } from "@neuledge/states";
import { generate } from "@neuledge/typescript-states";
import pLimit from "p-limit";
var setGenerateCommand = /* @__PURE__ */ __name((program) => program.command("generate", {
  isDefault: true
}).description("Convert `.states` files to TypeScript files (default command)").argument("<files...>", "files to build").option("-P, --basepath <path>", "base path").option("-O, --output <file>", "output ts file").action(action), "setGenerateCommand");
var action = /* @__PURE__ */ __name(async (files, options) => {
  const resolvedFiles = await resolveFiles(files, options.basepath);
  const asyncLimit = pLimit(10);
  const inputs = await Promise.all(resolvedFiles.map((filepath) => asyncLimit(async () => ({
    source: await fs.readFile(filepath, {
      encoding: "utf8"
    }),
    filepath
  }))));
  const ctx = new StatesContext();
  await ctx.load(inputs);
  const outputFile = resolve(options.basepath ?? "", options.output || "states.ts");
  await fs.writeFile(outputFile, generate(ctx));
}, "action");
var resolveFiles = /* @__PURE__ */ __name(async (files, basepath) => {
  const staticFiles = [];
  const dynamicFiles = [];
  for (const file of files) {
    if (fg.isDynamicPattern(file)) {
      dynamicFiles.push(file);
    } else {
      staticFiles.push(file);
    }
  }
  return [
    ...staticFiles,
    ...await fg(dynamicFiles, {
      cwd: basepath,
      onlyFiles: true,
      unique: true
    })
  ].map((file) => resolve(basepath ?? "", file));
}, "resolveFiles");

// src/error.ts
import fs2 from "node:fs";
var catchExceptions = /* @__PURE__ */ __name(() => process.on("uncaughtException", (err) => errorHandler(err)), "catchExceptions");
var errorHandler = /* @__PURE__ */ __name((err, code = 1) => {
  fs2.writeSync(process.stderr.fd, String(err?.stack || err) + "\n");
  process.exit(code);
}, "errorHandler");

// src/index.ts
var { version } = JSON.parse(readFileSync(new URL("../package.json", import.meta.url)).toString());
var createProgram = /* @__PURE__ */ __name(() => {
  const program = new Command();
  setProgram(program);
  setGenerateCommand(program);
  catchExceptions();
  return program;
}, "createProgram");
var setProgram = /* @__PURE__ */ __name((program) => program.name("states").description("CLI to build and compile `.states` files").version(version, "-v, --version", "output the current version"), "setProgram");
export {
  createProgram
};
//# sourceMappingURL=index.mjs.map