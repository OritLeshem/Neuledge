"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  StoreError: () => StoreError,
  getStoreScalarValueKey: () => getStoreScalarValueKey,
  isStoreScalarValueEqual: () => isStoreScalarValueEqual,
  uniqueStoreScalarValues: () => uniqueStoreScalarValues
});
module.exports = __toCommonJS(src_exports);

// src/error.ts
var StoreErrorCode;
(function(StoreErrorCode2) {
  StoreErrorCode2[
    // abort errors
    "ABORTED"
  ] = "ABORTED";
  StoreErrorCode2[
    // input errors
    "INVALID_INPUT"
  ] = "INVALID_INPUT";
  StoreErrorCode2["NOT_SUPPORTED"] = "NOT_SUPPORTED";
  StoreErrorCode2[
    // collection errors
    "COLLECTION_NOT_FOUND"
  ] = "COLLECTION_NOT_FOUND";
  StoreErrorCode2[
    // store errors
    "INVALID_DATA"
  ] = "INVALID_DATA";
  StoreErrorCode2[
    // internal errors
    "INTERNAL_ERROR"
  ] = "INTERNAL_ERROR";
  StoreErrorCode2["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
})(StoreErrorCode || (StoreErrorCode = {}));
var StoreError = class extends Error {
  code;
  constructor(code, message) {
    super(message);
    this.code = code;
    this.name = "StoreError";
  }
};
__name(StoreError, "StoreError");
__publicField(StoreError, "Code", StoreErrorCode);

// src/value.ts
var isStoreScalarValueEqual = /* @__PURE__ */ __name((a, b) => {
  if (a === b) {
    return true;
  }
  if (typeof a !== "object" || typeof b !== "object") {
    return false;
  }
  if (a === null || b === null) {
    return false;
  }
  if (a instanceof Buffer) {
    if (!(b instanceof Buffer)) {
      return false;
    }
    return a.equals(b);
  }
  if (a instanceof Date) {
    if (!(b instanceof Date)) {
      return false;
    }
    return a.getTime() === b.getTime();
  }
  if (b instanceof Buffer || b instanceof Date) {
    return false;
  }
  if (Array.isArray(a)) {
    if (!Array.isArray(b)) {
      return false;
    }
    if (a.length !== b.length) {
      return false;
    }
    return a.every((v, i) => isStoreScalarValueEqual(v, b[i]));
  }
  if (Array.isArray(b)) {
    return false;
  }
  const aKeys = Object.keys(a);
  const bKeys = Object.keys(b);
  if (aKeys.length !== bKeys.length) {
    return false;
  }
  return aKeys.every((key) => isStoreScalarValueEqual(a[key], b[key]));
}, "isStoreScalarValueEqual");
var uniqueStoreScalarValues = /* @__PURE__ */ __name((values) => [
  ...new Map(values.map((value) => [
    getStoreScalarValueKey(value),
    value
  ])).values()
], "uniqueStoreScalarValues");
var getStoreScalarValueKey = /* @__PURE__ */ __name((value) => {
  switch (typeof value) {
    case "number":
    case "bigint":
    case "boolean": {
      return value;
    }
    case "undefined": {
      return null;
    }
    case "string": {
      return JSON.stringify(value);
    }
    case "object": {
      if (value === null) {
        return value;
      }
      if (value instanceof Buffer) {
        return value.toString("base64");
      }
      if (value instanceof Date) {
        return value.toISOString();
      }
      if (Array.isArray(value)) {
        return `[${value.map((v) => getStoreScalarValueKey(v)).join(",")}]`;
      }
      return `{${Object.entries(value).map(([k, v]) => `${JSON.stringify(k)}:${getStoreScalarValueKey(v)}`).join(",")}}`;
    }
  }
}, "getStoreScalarValueKey");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  StoreError,
  getStoreScalarValueKey,
  isStoreScalarValueEqual,
  uniqueStoreScalarValues
});
//# sourceMappingURL=index.js.map