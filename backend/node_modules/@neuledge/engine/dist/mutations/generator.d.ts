import { StateDefinition } from '../definitions';
import { Query, QueryMode, QueryOptions } from '../queries';
import { Mutation } from './mutation';
export interface MutationGeneratorMethod {
    (...args: Record<string, never>[]): Query<QueryMode, StateDefinition, StateDefinition, null, NonNullable<unknown>>;
}
export declare const MutationGenerator: <T extends "InitMany" | "AlterFirstOrThrow" | "AlterFirst" | "AlterMany" | "AlterUniqueOrThrow" | "AlterUnique" | "InitOne", I extends StateDefinition<string, any>>(type: T, states: I[], generator: (options: Pick<QueryOptions<T, I, StateDefinition<string, any>>, "type" | "method" | "args" | "states">) => Query<QueryMode, StateDefinition, StateDefinition, null, NonNullable<unknown>>) => Mutation<T, I>;
//# sourceMappingURL=generator.d.ts.map