import { StateDefinition, StateDefinitionAlterMethods, StateDefinitionMutationsReturn } from '../../definitions';
import { Entity, ProjectedEntity } from '../../entity';
import { Select, AlterFirstOrThrowQueryOptions, AlterFirstQueryOptions, AlterManyQueryOptions, AlterUniqueOrThrowQueryOptions, AlterUniqueQueryOptions } from '../../queries';
import { NeuledgeEngine } from '../engine';
type AlterQueryOptions<S extends StateDefinition, R extends ReturnState<S> = ReturnState<S>> = AlterManyQueryOptions<S, R> | AlterFirstQueryOptions<S, R> | AlterFirstOrThrowQueryOptions<S, R> | AlterUniqueQueryOptions<S, R> | AlterUniqueOrThrowQueryOptions<S, R>;
type ReturnState<S extends StateDefinition> = StateDefinitionMutationsReturn<S, StateDefinitionAlterMethods<S>>;
export declare const execAlterMany: <S extends StateDefinition<string, any>>(engine: NeuledgeEngine, options: AlterQueryOptions<S, ReturnState<S>>) => Promise<void | Entity<ReturnState<S>>[] | ProjectedEntity<ReturnState<S>, Select<ReturnState<S>>>[]>;
export declare const execAlterOne: <S extends StateDefinition<string, any>>(engine: NeuledgeEngine, options: AlterFirstQueryOptions<S, ReturnState<S>> | AlterFirstOrThrowQueryOptions<S, ReturnState<S>> | AlterUniqueQueryOptions<S, ReturnState<S>> | AlterUniqueOrThrowQueryOptions<S, ReturnState<S>>) => Promise<void | Entity<ReturnState<S>> | ProjectedEntity<ReturnState<S>, Select<ReturnState<S>>>>;
export {};
//# sourceMappingURL=alter.d.ts.map