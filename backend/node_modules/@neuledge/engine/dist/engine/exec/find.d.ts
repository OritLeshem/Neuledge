import { StateDefinition } from '../../definitions';
import { Entity } from '../../entity';
import { EntityList } from '../../list';
import { FindFirstOrThrowQueryOptions, FindFirstQueryOptions, FindManyQueryOptions, FindUniqueOrThrowQueryOptions, FindUniqueQueryOptions } from '../../queries';
import { NeuledgeEngine } from '../engine';
export declare const execFindMany: <S extends StateDefinition<string, any>>(engine: NeuledgeEngine, options: FindManyQueryOptions<S, S>) => Promise<EntityList<Entity<S>>>;
export declare const execFindUnique: <S extends StateDefinition<string, any>>(engine: NeuledgeEngine, options: FindUniqueQueryOptions<S, S>) => Promise<Entity<S> | null>;
export declare const execFindUniqueOrThrow: <S extends StateDefinition<string, any>>(engine: NeuledgeEngine, options: FindUniqueOrThrowQueryOptions<S, S>) => Promise<Entity<S>>;
export declare const execFindFirst: <S extends StateDefinition<string, any>>(engine: NeuledgeEngine, options: FindFirstQueryOptions<S, S>) => Promise<Entity<S> | null>;
export declare const execFindFirstOrThrow: <S extends StateDefinition<string, any>>(engine: NeuledgeEngine, options: FindFirstOrThrowQueryOptions<S, S>) => Promise<Entity<S>>;
//# sourceMappingURL=find.d.ts.map