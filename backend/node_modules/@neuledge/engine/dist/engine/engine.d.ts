import { Metadata } from '../metadata/metadata';
import { StateDefinition } from '../definitions';
import { FindFirstOrThrowQuery, FindFirstQuery, FindManyQuery, FindUniqueOrThrowQuery, FindUniqueQuery } from '../queries';
import { Store } from '@neuledge/store';
import { AlterFirstMutation, AlterFirstOrThrowMutation, AlterManyMutation, AlterUniqueMutation, AlterUniqueOrThrowMutation, InitManyMutation, InitOneMutation } from '../mutations';
export interface NeuledgeEngineOptions {
    store: Store;
    metadataCollectionName?: string;
}
/**
 * The main class of the Neuledge engine.
 * It provides methods to query and mutate state entities. To create an instance
 * of this class, you will need to provide a store instance. The store is used
 * to persist the state entities on the database.
 *
 * ```ts
 * import { NeuledgeEngine } from '@neuledge/engine';
 * import { MongoDBStore } from '@neuledge/mongodb-store';
 *
 * const store = new MongoDBStore({ ... });
 * const engine = new NeuledgeEngine({ store });
 */
export declare class NeuledgeEngine {
    readonly store: Store;
    readonly metadata: Promise<Metadata>;
    constructor(options: NeuledgeEngineOptions);
    /**
     * Find many entities that match the given states.
     * It's not possible to query multiple states from different collections at
     * once.
     */
    findMany<S extends StateDefinition>(...states: S[]): FindManyQuery<S>;
    /**
     * Find a unique entity that matches the given states.
     * Use the `.unique()` method to provide the unique where clause. Returns null
     * if no entity was found. It's not possible to query multiple states from
     * different collections at once.
     */
    findUnique<S extends StateDefinition>(...states: S[]): FindUniqueQuery<S>;
    /**
     * Find a unique entity that matches the given states.
     * Use the `.unique()` method to provide the unique where clause. Throws an
     * error if no entity was found. It's not possible to query multiple states
     * from different collections at once.
     */
    findUniqueOrThrow<S extends StateDefinition>(...states: S[]): FindUniqueOrThrowQuery<S>;
    /**
     * Find the first entity that matches the given states.
     * Returns null if no entity was found. It's not possible to query multiple
     * states from different collections at once.
     */
    findFirst<S extends StateDefinition>(...states: S[]): FindFirstQuery<S>;
    /**
     * Find the first entity that matches the given states.
     * Throws an error if no entity was found. It's not possible to query multiple
     * states from different collections at once.
     */
    findFirstOrThrow<S extends StateDefinition>(...states: S[]): FindFirstOrThrowQuery<S>;
    /**
     * Call a create mutation for the given state and create multiple new
     * entities.
     * Returns void by default. Use the `.select()` method to return the created
     * entities.
     *
     * For example, for a state `DraftPost` with the create mutation `create`:
     * ```
     * engine.initMany(DraftPost).create({ title: 'Hello' }, { title: 'World' })
     * ```
     */
    initMany<S extends StateDefinition>(state: S): InitManyMutation<S>;
    /**
     * Call a create mutation for the given state and create a new entity.
     * Returns void by default. Use the `.select()` method to return the created
     * entity.
     *
     * For example, for a state `DraftPost` with the create mutation `create`:
     * ```
     * engine.initOne(DraftPost).create({ title: 'Hello' })
     * ```
     */
    initOne<S extends StateDefinition>(state: S): InitOneMutation<S>;
    /**
     * Call an update or delete mutation for the given states and alter multiple
     * entities at once.
     * Returns void by default. Use the `.return()` method to return the original
     * or altered entities. You may filter and limit the entities that are altered
     * by using `.where()` or other methods.
     *
     * For example, for a state `DraftPost` with the update mutation `update`:
     * ```
     * engine.alterMany(DraftPost).update({ title: 'Hello' })
     * ```
     */
    alterMany<S extends StateDefinition>(...states: S[]): AlterManyMutation<S>;
    /**
     * Call an update or delete mutation for the given states and alter the first
     * matching entity.
     * Returns void by default. Use the `.return()` method to return the original
     * or altered entities. You may filter and limit the entities that are altered
     * by using `.where()` or other methods.
     *
     * For example, for a state `DraftPost` with the update mutation `update`:
     * ```
     * engine.alterFirst(DraftPost).update({ title: 'Hello' })
     * ```
     */
    alterFirst<S extends StateDefinition>(...states: S[]): AlterFirstMutation<S>;
    /**
     * Call an update or delete mutation for the given states and alter the first
     * matching entity.
     * Returns void by default. Throws an error if no entity was found. Use the
     * `.return()` method to return the original or altered entities. You may
     * filter and limit the entities that are altered by using `.where()` or other
     * methods.
     *
     * For example, for a state `DraftPost` with the update mutation `update`:
     * ```
     * engine.alterFirstOrThrow(DraftPost).update({ title: 'Hello' })
     * ```
     */
    alterFirstOrThrow<S extends StateDefinition>(...states: S[]): AlterFirstOrThrowMutation<S>;
    /**
     * Call an update or delete mutation for the given states and alter the
     * uniquely matching entity.
     * Returns void by default. Use the `.return()` method to return the original
     * or altered entity. Use the `.unique()` method to specify the unique fields.
     *
     * For example, for a state `DraftPost` with the update mutation `update`:
     * ```
     * engine.alterUnique(DraftPost).update({ title: 'Hello' }).unique({ id: 1 })
     * ```
     */
    alterUnique<S extends StateDefinition>(...states: S[]): AlterUniqueMutation<S>;
    /**
     * Call an update or delete mutation for the given states and alter the
     * uniquely matching entity.
     * Returns void by default. Throws an error if no entity was found. Use the
     * `.return()` method to return the original or altered entity. Use the
     * `.unique()` method to specify the unique fields.
     *
     * For example, for a state `DraftPost` with the update mutation `update`:
     * ```
     * engine.alterUniqueOrThrow(DraftPost).update({ title: 'Hello' }).unique({ id: 1 })
     * ```
     */
    alterUniqueOrThrow<S extends StateDefinition>(...states: S[]): AlterUniqueOrThrowMutation<S>;
    /**
     * Return a promise that resolves when the engine is ready.
     * The engine is ready when the metadata is loaded and the database is
     * connected. This is useful when you want to wait for the engine to be ready
     * before starting your server. If you query the engine before it is ready,
     * the queries will be queued and executed when the engine is ready or throw
     * if there is an error while loading the engine.
     */
    ready(): Promise<this>;
}
//# sourceMappingURL=engine.d.ts.map