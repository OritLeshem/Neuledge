import { StateDefintionScalar } from '../../definitions';
import { Scalar } from '@neuledge/scalars';
export interface StateFieldSnapshot {
    name: string;
    path?: string;
    indexes: number[];
    type: Scalar;
    nullable: boolean;
}
export interface MetadataStateField extends StateFieldSnapshot {
    path: string;
}
export declare const getMetadataStateFieldKey: (field: StateFieldSnapshot, strict?: boolean) => string;
/**
 * Generate list of scalar fields from field definition. Usually, each field definition
 * will have only one scalar field, but in case of nested states, it may have multiple
 * fields, as the number of primary keys in the nested state.
 *
 * We will assign a unique name to each field, and the path will match the original
 * field destination, using dot notation for nested fields. For example, if we have
 * a field named `user` that is a nested state, and the nested state has a primary
 * key named `id`, the field name will be `user_id`, and the path will be `user.id`.
 *
 * The indexes will be the indexes of the parent state, plus the index of the field
 * in the current state. Top level fields will have only one item in the indexes array
 * that equals the index of the field in the state.
 */
export declare const getScalarFields: (name: string, path: string, scalarDef: StateDefintionScalar, parentIndexes?: number[], nullable?: boolean) => MetadataStateField[];
//# sourceMappingURL=field.d.ts.map