import { StoreCollection, StoreField, StoreIndex, StorePrimaryKey } from '@neuledge/store';
import { MetadataSchema } from './schema';
import { MetadataState, MetadataStateField, MetadataStateReservedNames } from './state';
export type MetadataCollectionFieldMap = Record<MetadataStateField['path'], {
    fields: Map<MetadataStateField['name'], MetadataStateField>;
    children: Set<MetadataStateField['path']>;
}>;
export declare class MetadataCollection implements StoreCollection {
    readonly name: string;
    readonly states: MetadataState[];
    readonly reservedNames: MetadataStateReservedNames;
    readonly schema: MetadataSchema;
    readonly primaryKey: StorePrimaryKey;
    readonly indexes: Record<StoreIndex['name'], StoreIndex>;
    readonly fields: Record<StoreField['name'], StoreField>;
    constructor(name: string, states: MetadataState[]);
    /**
     * Traverse the collection schema and all fields under the given path.
     */
    getSchemaFields(rootPath: string): MetadataStateField[];
    /**
     * Traverse the collection schema and all field names under the given path.
     */
    getSchemaFieldNames(rootPath: string): string[];
}
//# sourceMappingURL=collection.d.ts.map