/// <reference types="node" />
import { Scalar } from '@neuledge/scalars';
import { MetadataChange } from './change';
import { StateSnapshot } from './state';
/**
 * MetadataSnapshot is a snapshot of the metadata state at a given point in time
 * and provides a way to query the metadata state by hash, key, or type. It's
 * built from a list of snapshot states that may or may not exist in the codebase
 * anymore.
 */
export declare class MetadataSnapshot<S extends StateSnapshot = StateSnapshot> {
    private readonly typeMap;
    private readonly hashMap;
    private readonly keyMap;
    constructor(states: Iterable<S>);
    get states(): S[];
    findType(key: string): Scalar | undefined;
    findStateByHash(hash: Buffer): StateSnapshot | undefined;
    findStateByKey(key: string): S | undefined;
    sync(snapshot: MetadataSnapshot): MetadataChange[];
}
//# sourceMappingURL=snapshot.d.ts.map