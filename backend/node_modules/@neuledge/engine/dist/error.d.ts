declare enum NeuledgeErrorCode {
    VERSION_MISMATCH = "VERSION_MISMATCH",
    INVALID_ARGUMENT = "INVALID_ARGUMENT",
    DOCUMENT_NOT_FOUND = "DOCUMENT_NOT_FOUND",
    NO_COLLECTIONS = "NO_COLLECTIONS",
    MULTIPLE_COLLECTIONS = "MULTIPLE_COLLECTIONS",
    ENTITY_STATE_NOT_FOUND = "ENTITY_STATE_NOT_FOUND",
    RESERVED_FIELD_NAME = "RESERVED_FIELD_NAME",
    DUPLICATE_STATE_NAME = "DUPLICATE_STATE_NAME",
    UNKNOWN_SORT_DIRECTION = "UNKNOWN_SORT_DIRECTION",
    UNKNOWN_SORT_INDEX = "UNKNOWN_SORT_INDEX",
    UNKNOWN_SORT_FIELD = "UNKNOWN_SORT_FIELD",
    RELATION_FIELD_NOT_FOUND = "RELATION_FIELD_NOT_FOUND",
    RELATION_STATE_NOT_FOUND = "RELATION_STATE_NOT_FOUND",
    QUERY_PARSING_ERROR = "QUERY_PARSING_ERROR",
    QUERY_EXECUTION_ERROR = "QUERY_EXECUTION_ERROR",
    INVALID_MUTATION = "INVALID_MUTATION",
    UNSUPPORTED_METADATA = "UNSUPPORTED_METADATA",
    CORRUPTED_METADATA = "CORRUPTED_METADATA",
    METADATA_SAVE_ERROR = "METADATA_SAVE_ERROR",
    METADATA_LOAD_ERROR = "METADATA_LOAD_ERROR",
    INTERNAL_ERROR = "INTERNAL_ERROR",
    NOT_IMPLEMENTED = "NOT_IMPLEMENTED"
}
export declare namespace NeuledgeError {
    type Code = NeuledgeErrorCode;
}
export declare class NeuledgeError extends Error {
    readonly code: NeuledgeError.Code;
    static Code: typeof NeuledgeErrorCode;
    static wrap: (code?: NeuledgeErrorCode, message?: string, hideOriginalError?: boolean) => (originalError: Error) => never;
    static fromError(originalError: Error | unknown, code?: NeuledgeError.Code, message?: string, hideOriginalError?: boolean): NeuledgeError;
    constructor(code: NeuledgeError.Code, message: string);
    originalError?: Error;
}
export {};
//# sourceMappingURL=error.d.ts.map