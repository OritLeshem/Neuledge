import { StateAllRelations, StateDefinition, StateOneRelations, StateRelationStates } from '../definitions';
import { EntityListOffset } from '../list';
import { ExecQuery, ExpandQuery, ExpandQueryParam, LimitQuery, MatchQuery, MatchQueryParam, OffsetQuery, PopulateOneQueryParam, PopulateQuery, Return, ReturnQuery, Select, SelectParam, SelectQuery, SortField, SortIndex, Unique, UniqueQuery, Where, WhereQuery, Filter, FilterQuery } from './raw';
import { QueryOptions, QueryType } from './query';
export declare class QueryClass<T extends QueryType, I extends StateDefinition, O extends StateDefinition> implements ReturnQuery<any, I, O>, // eslint-disable-line @typescript-eslint/no-explicit-any
SelectQuery<any, I, O, any>, // eslint-disable-line @typescript-eslint/no-explicit-any
ExpandQuery<any, I, O, any, any>, // eslint-disable-line @typescript-eslint/no-explicit-any
PopulateQuery<any, I, O, any, any>, // eslint-disable-line @typescript-eslint/no-explicit-any
WhereQuery<I>, UniqueQuery<any, I, O, any, any>, // eslint-disable-line @typescript-eslint/no-explicit-any
FilterQuery<I>, MatchQuery<I>, LimitQuery, OffsetQuery, ExecQuery<any> {
    private readonly options;
    constructor(options: QueryOptions<T, I, O>);
    return(returns?: Return): this;
    select<P extends Select<O>>(select?: SelectParam<O, P> | true): this;
    expand<K extends StateOneRelations<O>>(key: K, states?: StateRelationStates<O, K>[] | ExpandQueryParam<StateRelationStates<O, K>>, query?: ExpandQueryParam<StateRelationStates<O, K>>): this;
    populateOne<K extends StateOneRelations<O>>(key: K, states?: StateRelationStates<O, K>[] | PopulateOneQueryParam<StateRelationStates<O, K>>, query?: PopulateOneQueryParam<StateRelationStates<O, K>>): this;
    where(where: Where<I> | null): this;
    unique(where: Unique<I>): this;
    filter(filter: Filter<I> | null): this;
    match<K extends StateAllRelations<I>>(key: K, states?: StateRelationStates<I, K>[] | MatchQueryParam<StateRelationStates<I, K>>, query?: MatchQueryParam<StateRelationStates<I, K>>): this;
    sort(sort: '*' | SortIndex<O> | null, ...fields: SortField<O>[]): this;
    limit(limit: number | null): this;
    offset(offset: EntityListOffset | null): this;
    exec(): Promise<any>;
    then<TResult1 = any, TResult2 = never>(onfulfilled?: // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ((value: any) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
}
//# sourceMappingURL=class.d.ts.map