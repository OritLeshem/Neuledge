import { StateDefinition, StateDefinitionWhere, StateName, StateWhere } from '../../definitions';
import { AllKeys } from './utils';
export interface WhereQuery<S extends StateDefinition> {
    /**
     * Filter the returned entities by a where clause using an index.
     * This is the fastest way to filter entities but you can only filter by
     * indexed fields. If you want to filter by a field that is not indexed, you
     * should use the `.filter()` method.
     */
    where(where: Where<S> | null): this;
}
export interface WhereQueryOptions<S extends StateDefinition> {
    where?: Where<S> | null;
}
export type Where<S extends StateDefinition> = StateDefinitionWhere<NonCommonWhereKeys<S> extends never ? StateWhere<S> : StateWhere<S> & {
    [K in NonCommonWhereKeys<S>]?: null;
}>;
type NonCommonWhereKeys<S extends StateDefinition> = {
    [N in StateName<S>]: Exclude<AllKeys<StateWhere<S>>, S extends StateDefinition<N> ? AllKeys<StateWhere<S>> : never>;
}[StateName<S>];
export {};
//# sourceMappingURL=where.d.ts.map