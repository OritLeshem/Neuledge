import { StateDefinition, StateDefinitionWhere, StateFilter, StateName } from '../../definitions';
import { AllKeys } from './utils';
export interface FilterQuery<S extends StateDefinition> {
    /**
     * Filter the returned entities by a where clause without using the indexes.
     * This is useful when you want to filter by a field that is not indexed.
     * Please note that this will be much slower (and sometimes costly) than using
     * the index.
     */
    filter(filter: Filter<S> | null): this;
}
export interface FilterQueryOptions<S extends StateDefinition> {
    filter?: Filter<S> | null;
}
export type Filter<S extends StateDefinition> = StateDefinitionWhere<NonCommonFilterKeys<S> extends never ? StateFilter<S> : StateFilter<S> & {
    [K in NonCommonFilterKeys<S>]?: null;
}>;
type NonCommonFilterKeys<S extends StateDefinition> = {
    [K in StateName<S>]: Exclude<AllKeys<StateFilter<S>>, S extends StateDefinition<K> ? AllKeys<StateFilter<S>> : never>;
}[StateName<S>];
export {};
//# sourceMappingURL=filter.d.ts.map