import { StateDefinition, StateName } from '../state';
import { CreateMutationDefinition, CreateWithArgsMutationDefinition, CreateWithoutArgsMutationDefinition, DeleteMutationDefinition, DeleteWithArgsMutationDefinition, DeleteWithoutArgsMutationDefinition, UpdateWithArgsMutationDefinition, UpdateWithoutArgsMutationDefinition } from './mutation';
export type StateDefinitionMethods<S extends StateDefinition> = StateDefinitionInitMethods<S> | StateDefinitionAlterMethods<S>;
export type StateDefinitionInitMethods<S extends StateDefinition> = StateDefinitionInitWithArgsMethods<S> | StateDefinitionInitWithoutArgsMethods<S>;
export type StateDefinitionInitWithArgsMethods<S extends StateDefinition> = StateDefinitionCreateWithArgsMethods<S>;
export type StateDefinitionInitWithoutArgsMethods<S extends StateDefinition> = StateDefinitionCreateWithoutArgsMethods<S>;
export type StateDefinitionAlterMethods<S extends StateDefinition> = StateDefinitionAlterWithArgsMethods<S> | StateDefinitionAlterWithoutArgsMethods<S>;
export type StateDefinitionAlterWithArgsMethods<S extends StateDefinition> = StateDefinitionUpdateWithArgsMethods<S> | StateDefinitionDeleteWithArgsMethods<S>;
export type StateDefinitionAlterWithoutArgsMethods<S extends StateDefinition> = StateDefinitionUpdateWithoutArgsMethods<S> | StateDefinitionDeleteWithoutArgsMethods<S>;
type StateDefinitionCreateWithArgsMethods<S extends StateDefinition> = {
    [M in keyof S]: S[M] extends CreateWithArgsMutationDefinition<S, any> ? M : never;
}[keyof S];
type StateDefinitionCreateWithoutArgsMethods<S extends StateDefinition> = {
    [M in keyof S]: S[M] extends CreateWithoutArgsMutationDefinition<S> ? M : never;
}[keyof S];
type StateDefinitionUpdateWithArgsMethods<S extends StateDefinition> = {
    [M in keyof S]: S[M] extends UpdateWithArgsMutationDefinition<S, any, any> ? M : never;
}[keyof S];
type StateDefinitionUpdateWithoutArgsMethods<S extends StateDefinition> = {
    [M in keyof S]: S[M] extends UpdateWithoutArgsMutationDefinition<S, any> ? M : never;
}[keyof S];
type StateDefinitionDeleteWithArgsMethods<S extends StateDefinition> = {
    [M in keyof S]: S[M] extends DeleteWithArgsMutationDefinition<S, any> ? M : never;
}[keyof S];
type StateDefinitionDeleteWithoutArgsMethods<S extends StateDefinition> = {
    [M in keyof S]: S[M] extends DeleteWithoutArgsMutationDefinition<S> ? M : never;
}[keyof S];
export type StateDefinitionMutationArguments<S extends StateDefinition, M extends keyof S> = S[M] extends (this: any, args: infer A) => any ? unknown extends A ? Record<string, never> : A : Record<string, never>;
export type StateDefinitionMutationsReturn<S extends StateDefinition, M extends keyof S> = {
    [N in StateName<S>]: S extends StateDefinition<N, any> ? S[M] extends DeleteMutationDefinition<S> ? never : S[M] extends CreateMutationDefinition<S, any> ? S : S[M] extends UpdateWithArgsMutationDefinition<S, any, infer R> ? R : S[M] extends UpdateWithoutArgsMutationDefinition<S, infer R> ? R : never : never;
}[StateName<S>];
export {};
//# sourceMappingURL=state-helpers.d.ts.map