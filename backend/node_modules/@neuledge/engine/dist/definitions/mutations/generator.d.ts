import { InitiatedEntity, AlteredEntity } from '../../entity';
import { StateDefinition, StateType } from '../state';
import { CreateWithArgsMutationDefinition, CreateWithoutArgsMutationDefinition, DeleteWithArgsMutationDefinition, DeleteWithoutArgsMutationDefinition, MutationDefinitionArguments, UpdateWithArgsMutationDefinition, UpdateWithoutArgsMutationDefinition } from './mutation';
import { Resolveable } from './utils';
export declare function createMutation<S extends StateDefinition, A extends MutationDefinitionArguments>(type: 'create', mutation: (this: void, args: A) => Resolveable<InitiatedEntity<S>>): CreateWithArgsMutationDefinition<S, A>;
export declare function createMutation<S extends StateDefinition>(type: 'create', mutation: (this: void) => Resolveable<InitiatedEntity<S>>): CreateWithoutArgsMutationDefinition<S>;
export declare function createMutation<S extends StateDefinition, A extends MutationDefinitionArguments, R extends StateDefinition>(type: 'update', mutation: (this: StateType<S>, args: A) => Resolveable<AlteredEntity<R>>): UpdateWithArgsMutationDefinition<S, A, R>;
export declare function createMutation<S extends StateDefinition, R extends StateDefinition>(type: 'update', mutation: (this: StateType<S>, args?: object) => Resolveable<AlteredEntity<R>>): UpdateWithoutArgsMutationDefinition<S, R>;
export declare function createMutation<S extends StateDefinition, A extends MutationDefinitionArguments>(type: 'delete', mutation: (this: StateType<S>, args: A) => Resolveable<void>): DeleteWithArgsMutationDefinition<S, A>;
export declare function createMutation<S extends StateDefinition>(type: 'delete', mutation?: (this: StateType<S>) => Resolveable<void>): DeleteWithoutArgsMutationDefinition<S>;
//# sourceMappingURL=generator.d.ts.map