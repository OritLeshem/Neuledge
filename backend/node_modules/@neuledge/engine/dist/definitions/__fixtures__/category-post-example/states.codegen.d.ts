import { $ } from '@neuledge/engine';
/**
 * A posts category
 */
export declare class Category {
    static $name: "Category";
    static $id: {
        readonly fields: readonly ["+id"];
        readonly auto: "increment";
    };
    static $scalars: () => {
        id: {
            type: import("../../../../../scalars/dist").CallableScalar<{
                min: {
                    type: import("../../../../../scalars/dist").Scalar<number, number, number, "number">;
                    nullable: true;
                };
                max: {
                    type: import("../../../../../scalars/dist").Scalar<number, number, number, "number">;
                    nullable: true;
                };
                after: {
                    type: import("../../../../../scalars/dist").Scalar<number, number, number, "number">;
                    nullable: true;
                };
                below: {
                    type: import("../../../../../scalars/dist").Scalar<number, number, number, "number">;
                    nullable: true;
                };
            }, number, number, number, "number">;
            index: number;
        };
        name: {
            type: import("../../../../../scalars/dist").CallableScalar<{
                min: {
                    type: import("../../../../../scalars/dist").Scalar<number, number, number, "number">;
                    nullable: true;
                };
                max: {
                    type: import("../../../../../scalars/dist").Scalar<number, number, number, "number">;
                    nullable: true;
                };
                trim: {
                    type: import("../../../../../scalars/dist").Scalar<boolean, boolean | 0 | 1 | "false" | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES" | "no" | "False" | "No" | "FALSE" | "NO", boolean, "boolean">;
                    nullable: true;
                };
                lowercase: {
                    type: import("../../../../../scalars/dist").Scalar<boolean, boolean | 0 | 1 | "false" | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES" | "no" | "False" | "No" | "FALSE" | "NO", boolean, "boolean">;
                    nullable: true;
                };
                uppercase: {
                    type: import("../../../../../scalars/dist").Scalar<boolean, boolean | 0 | 1 | "false" | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES" | "no" | "False" | "No" | "FALSE" | "NO", boolean, "boolean">;
                    nullable: true;
                };
                normalize: {
                    type: import("../../../../../scalars/dist").Scalar<boolean, boolean | 0 | 1 | "false" | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES" | "no" | "False" | "No" | "FALSE" | "NO", boolean, "boolean">;
                    nullable: true;
                };
                startsWith: {
                    type: import("../../../../../scalars/dist").Scalar<string, string, string, "string" | "enum">;
                    nullable: true;
                };
                endsWith: {
                    type: import("../../../../../scalars/dist").Scalar<string, string, string, "string" | "enum">;
                    nullable: true;
                };
                regex: {
                    type: import("../../../../../scalars/dist").Scalar<string, string, string, "string" | "enum">;
                    nullable: true;
                };
            }, string, string, string, "string" | "enum">;
            index: number;
        };
        description: {
            type: import("../../../../../scalars/dist").CallableScalar<{
                min: {
                    type: import("../../../../../scalars/dist").Scalar<number, number, number, "number">;
                    nullable: true;
                };
                max: {
                    type: import("../../../../../scalars/dist").Scalar<number, number, number, "number">;
                    nullable: true;
                };
                trim: {
                    type: import("../../../../../scalars/dist").Scalar<boolean, boolean | 0 | 1 | "false" | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES" | "no" | "False" | "No" | "FALSE" | "NO", boolean, "boolean">;
                    nullable: true;
                };
                lowercase: {
                    type: import("../../../../../scalars/dist").Scalar<boolean, boolean | 0 | 1 | "false" | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES" | "no" | "False" | "No" | "FALSE" | "NO", boolean, "boolean">;
                    nullable: true;
                };
                uppercase: {
                    type: import("../../../../../scalars/dist").Scalar<boolean, boolean | 0 | 1 | "false" | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES" | "no" | "False" | "No" | "FALSE" | "NO", boolean, "boolean">;
                    nullable: true;
                };
                normalize: {
                    type: import("../../../../../scalars/dist").Scalar<boolean, boolean | 0 | 1 | "false" | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES" | "no" | "False" | "No" | "FALSE" | "NO", boolean, "boolean">;
                    nullable: true;
                };
                startsWith: {
                    type: import("../../../../../scalars/dist").Scalar<string, string, string, "string" | "enum">;
                    nullable: true;
                };
                endsWith: {
                    type: import("../../../../../scalars/dist").Scalar<string, string, string, "string" | "enum">;
                    nullable: true;
                };
                regex: {
                    type: import("../../../../../scalars/dist").Scalar<string, string, string, "string" | "enum">;
                    nullable: true;
                };
            }, string, string, string, "string" | "enum">;
            index: number;
            nullable: boolean;
        };
    };
    static $where: {
        id?: $.WhereNumber<$.scalars.Integer> | null;
    };
    static $unique: {
        id: $.scalars.Integer;
    };
    static $filter: {
        id?: $.WhereNumber<$.scalars.Integer> | null;
        name?: $.WhereString<$.scalars.String> | null;
        description?: $.WhereNullableString<$.scalars.String> | null;
    };
    static $relations: () => {
        posts: {
            readonly states: readonly (typeof DraftPost | typeof PublishedPost)[];
            readonly list: true;
            readonly reference: "category";
        };
    };
    id: $.scalars.Integer;
    name: $.scalars.String;
    description?: $.scalars.String | null;
    /**
     * Create a new category
     */
    static create: import("@neuledge/engine").CreateWithArgsMutationDefinition<typeof Category, {
        name: $.scalars.String;
        description?: string | null | undefined;
    }>;
    /**
     * Update the category details
     */
    static update: import("@neuledge/engine").UpdateWithArgsMutationDefinition<typeof Category, {
        name: $.scalars.String;
        description?: string | null | undefined;
    }, typeof Category>;
    /**
     * Delete the category and all it's related posts
     */
    static delete: import("@neuledge/engine").DeleteWithoutArgsMutationDefinition<typeof Category>;
}
export type $Category = $.Entity<typeof Category>;
/**
 * An unpublished post
 */
export declare class DraftPost {
    static $name: "DraftPost";
    static $id: {
        readonly fields: readonly ["+id"];
        readonly auto: "increment";
    };
    static $scalars: () => {
        id: {
            type: import("../../../../../scalars/dist").CallableScalar<{
                min: {
                    type: import("../../../../../scalars/dist").Scalar<number, number, number, "number">;
                    nullable: true;
                };
                max: {
                    type: import("../../../../../scalars/dist").Scalar<number, number, number, "number">;
                    nullable: true;
                };
                after: {
                    type: import("../../../../../scalars/dist").Scalar<number, number, number, "number">;
                    nullable: true;
                };
                below: {
                    type: import("../../../../../scalars/dist").Scalar<number, number, number, "number">;
                    nullable: true;
                };
            }, number, number, number, "number">;
            index: number;
        };
        category: {
            type: (typeof Category)[];
            index: number;
            nullable: boolean;
        };
        title: {
            type: import("../../../../../scalars/dist").CallableScalar<{
                min: {
                    type: import("../../../../../scalars/dist").Scalar<number, number, number, "number">;
                    nullable: true;
                };
                max: {
                    type: import("../../../../../scalars/dist").Scalar<number, number, number, "number">;
                    nullable: true;
                };
                trim: {
                    type: import("../../../../../scalars/dist").Scalar<boolean, boolean | 0 | 1 | "false" | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES" | "no" | "False" | "No" | "FALSE" | "NO", boolean, "boolean">;
                    nullable: true;
                };
                lowercase: {
                    type: import("../../../../../scalars/dist").Scalar<boolean, boolean | 0 | 1 | "false" | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES" | "no" | "False" | "No" | "FALSE" | "NO", boolean, "boolean">;
                    nullable: true;
                };
                uppercase: {
                    type: import("../../../../../scalars/dist").Scalar<boolean, boolean | 0 | 1 | "false" | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES" | "no" | "False" | "No" | "FALSE" | "NO", boolean, "boolean">;
                    nullable: true;
                };
                normalize: {
                    type: import("../../../../../scalars/dist").Scalar<boolean, boolean | 0 | 1 | "false" | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES" | "no" | "False" | "No" | "FALSE" | "NO", boolean, "boolean">;
                    nullable: true;
                };
                startsWith: {
                    type: import("../../../../../scalars/dist").Scalar<string, string, string, "string" | "enum">;
                    nullable: true;
                };
                endsWith: {
                    type: import("../../../../../scalars/dist").Scalar<string, string, string, "string" | "enum">;
                    nullable: true;
                };
                regex: {
                    type: import("../../../../../scalars/dist").Scalar<string, string, string, "string" | "enum">;
                    nullable: true;
                };
            }, string, string, string, "string" | "enum">;
            index: number;
        };
        content: {
            type: import("../../../../../scalars/dist").CallableScalar<{
                min: {
                    type: import("../../../../../scalars/dist").Scalar<number, number, number, "number">;
                    nullable: true;
                };
                max: {
                    type: import("../../../../../scalars/dist").Scalar<number, number, number, "number">;
                    nullable: true;
                };
                trim: {
                    type: import("../../../../../scalars/dist").Scalar<boolean, boolean | 0 | 1 | "false" | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES" | "no" | "False" | "No" | "FALSE" | "NO", boolean, "boolean">;
                    nullable: true;
                };
                lowercase: {
                    type: import("../../../../../scalars/dist").Scalar<boolean, boolean | 0 | 1 | "false" | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES" | "no" | "False" | "No" | "FALSE" | "NO", boolean, "boolean">;
                    nullable: true;
                };
                uppercase: {
                    type: import("../../../../../scalars/dist").Scalar<boolean, boolean | 0 | 1 | "false" | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES" | "no" | "False" | "No" | "FALSE" | "NO", boolean, "boolean">;
                    nullable: true;
                };
                normalize: {
                    type: import("../../../../../scalars/dist").Scalar<boolean, boolean | 0 | 1 | "false" | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES" | "no" | "False" | "No" | "FALSE" | "NO", boolean, "boolean">;
                    nullable: true;
                };
                startsWith: {
                    type: import("../../../../../scalars/dist").Scalar<string, string, string, "string" | "enum">;
                    nullable: true;
                };
                endsWith: {
                    type: import("../../../../../scalars/dist").Scalar<string, string, string, "string" | "enum">;
                    nullable: true;
                };
                regex: {
                    type: import("../../../../../scalars/dist").Scalar<string, string, string, "string" | "enum">;
                    nullable: true;
                };
            }, string, string, string, "string" | "enum">;
            index: number;
            nullable: boolean;
        };
    };
    static $where: {
        id?: $.WhereNumber<$.scalars.Integer> | null;
    };
    static $unique: {
        id: $.scalars.Integer;
    };
    static $filter: {
        id?: $.WhereNumber<$.scalars.Integer> | null;
        category?: $.WhereNullableState<typeof Category> | null;
        title?: $.WhereString<$.scalars.String> | null;
        content?: $.WhereNullableString<$.scalars.String> | null;
    };
    static $relations: () => {
        category: {
            readonly states: readonly [typeof Category];
        };
    };
    static $transforms: () => (typeof PublishedPost)[];
    id: $.scalars.Integer;
    category?: $.Id<typeof Category> | null;
    title: $.scalars.String;
    content?: $.scalars.String | null;
    /**
     * Create a new draft post
     */
    static create: import("@neuledge/engine").CreateWithArgsMutationDefinition<typeof DraftPost, {
        title: $.scalars.String;
        content?: string | null | undefined;
        category?: $.Id<typeof Category> | null | undefined;
    }>;
    /**
     * Update a draft post
     */
    static update: import("@neuledge/engine").UpdateWithArgsMutationDefinition<typeof DraftPost, {
        title: $.scalars.String;
        content?: string | null | undefined;
        category?: $.Id<typeof Category> | null | undefined;
    }, typeof DraftPost>;
    /**
     * Publish a draft post
     */
    static publish: import("@neuledge/engine").UpdateWithoutArgsMutationDefinition<typeof DraftPost, typeof PublishedPost>;
    /**
     * Delete a post
     */
    static delete: import("@neuledge/engine").DeleteWithoutArgsMutationDefinition<typeof DraftPost>;
}
export type $DraftPost = $.Entity<typeof DraftPost>;
/**
 * A published post
 */
export declare class PublishedPost {
    static $name: "PublishedPost";
    static $id: {
        readonly fields: readonly ["+id"];
        readonly auto: "increment";
    };
    static $scalars: () => {
        id: {
            type: import("../../../../../scalars/dist").CallableScalar<{
                min: {
                    type: import("../../../../../scalars/dist").Scalar<number, number, number, "number">;
                    nullable: true;
                };
                max: {
                    type: import("../../../../../scalars/dist").Scalar<number, number, number, "number">;
                    nullable: true;
                };
                after: {
                    type: import("../../../../../scalars/dist").Scalar<number, number, number, "number">;
                    nullable: true;
                };
                below: {
                    type: import("../../../../../scalars/dist").Scalar<number, number, number, "number">;
                    nullable: true;
                };
            }, number, number, number, "number">;
            index: number;
        };
        category: {
            type: (typeof Category)[];
            index: number;
        };
        title: {
            type: import("../../../../../scalars/dist").CallableScalar<{
                min: {
                    type: import("../../../../../scalars/dist").Scalar<number, number, number, "number">;
                    nullable: true;
                };
                max: {
                    type: import("../../../../../scalars/dist").Scalar<number, number, number, "number">;
                    nullable: true;
                };
                trim: {
                    type: import("../../../../../scalars/dist").Scalar<boolean, boolean | 0 | 1 | "false" | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES" | "no" | "False" | "No" | "FALSE" | "NO", boolean, "boolean">;
                    nullable: true;
                };
                lowercase: {
                    type: import("../../../../../scalars/dist").Scalar<boolean, boolean | 0 | 1 | "false" | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES" | "no" | "False" | "No" | "FALSE" | "NO", boolean, "boolean">;
                    nullable: true;
                };
                uppercase: {
                    type: import("../../../../../scalars/dist").Scalar<boolean, boolean | 0 | 1 | "false" | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES" | "no" | "False" | "No" | "FALSE" | "NO", boolean, "boolean">;
                    nullable: true;
                };
                normalize: {
                    type: import("../../../../../scalars/dist").Scalar<boolean, boolean | 0 | 1 | "false" | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES" | "no" | "False" | "No" | "FALSE" | "NO", boolean, "boolean">;
                    nullable: true;
                };
                startsWith: {
                    type: import("../../../../../scalars/dist").Scalar<string, string, string, "string" | "enum">;
                    nullable: true;
                };
                endsWith: {
                    type: import("../../../../../scalars/dist").Scalar<string, string, string, "string" | "enum">;
                    nullable: true;
                };
                regex: {
                    type: import("../../../../../scalars/dist").Scalar<string, string, string, "string" | "enum">;
                    nullable: true;
                };
            }, string, string, string, "string" | "enum">;
            index: number;
        };
        content: {
            type: import("../../../../../scalars/dist").CallableScalar<{
                min: {
                    type: import("../../../../../scalars/dist").Scalar<number, number, number, "number">;
                    nullable: true;
                };
                max: {
                    type: import("../../../../../scalars/dist").Scalar<number, number, number, "number">;
                    nullable: true;
                };
                trim: {
                    type: import("../../../../../scalars/dist").Scalar<boolean, boolean | 0 | 1 | "false" | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES" | "no" | "False" | "No" | "FALSE" | "NO", boolean, "boolean">;
                    nullable: true;
                };
                lowercase: {
                    type: import("../../../../../scalars/dist").Scalar<boolean, boolean | 0 | 1 | "false" | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES" | "no" | "False" | "No" | "FALSE" | "NO", boolean, "boolean">;
                    nullable: true;
                };
                uppercase: {
                    type: import("../../../../../scalars/dist").Scalar<boolean, boolean | 0 | 1 | "false" | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES" | "no" | "False" | "No" | "FALSE" | "NO", boolean, "boolean">;
                    nullable: true;
                };
                normalize: {
                    type: import("../../../../../scalars/dist").Scalar<boolean, boolean | 0 | 1 | "false" | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES" | "no" | "False" | "No" | "FALSE" | "NO", boolean, "boolean">;
                    nullable: true;
                };
                startsWith: {
                    type: import("../../../../../scalars/dist").Scalar<string, string, string, "string" | "enum">;
                    nullable: true;
                };
                endsWith: {
                    type: import("../../../../../scalars/dist").Scalar<string, string, string, "string" | "enum">;
                    nullable: true;
                };
                regex: {
                    type: import("../../../../../scalars/dist").Scalar<string, string, string, "string" | "enum">;
                    nullable: true;
                };
            }, string, string, string, "string" | "enum">;
            index: number;
        };
        publishedAt: {
            type: import("../../../../../scalars/dist").CallableScalar<{
                min: {
                    type: import("../../../../../scalars/dist").Scalar<Date, string | number | Date, Date, "date-time">;
                    nullable: true;
                };
                max: {
                    type: import("../../../../../scalars/dist").Scalar<Date, string | number | Date, Date, "date-time">;
                    nullable: true;
                };
            }, Date, string | number | Date, Date, "date-time">;
            index: number;
        };
    };
    static $where: {
        category?: $.WhereState<typeof Category> | null;
        title?: null;
    } | {
        category: $.WhereState<typeof Category>;
        title?: $.WhereString<$.scalars.String> | null;
    } | {
        id?: $.WhereNumber<$.scalars.Integer> | null;
    };
    static $unique: {
        id: $.scalars.Integer;
    };
    static $filter: {
        id?: $.WhereNumber<$.scalars.Integer> | null;
        category?: $.WhereState<typeof Category> | null;
        title?: $.WhereString<$.scalars.String> | null;
        content?: $.WhereString<$.scalars.String> | null;
        publishedAt?: $.WhereDateTime<$.scalars.DateTime> | null;
    };
    static $relations: () => {
        category: {
            readonly states: readonly [typeof Category];
        };
    };
    static $indexes: {
        category_title: {
            readonly fields: readonly ["-category", "+title"];
        };
    };
    id: $.scalars.Integer;
    category: $.Id<typeof Category>;
    title: $.scalars.String;
    content: $.scalars.String;
    publishedAt: $.scalars.DateTime;
    /**
     * Update a post
     */
    static update: import("@neuledge/engine").UpdateWithArgsMutationDefinition<typeof PublishedPost, {
        title: $.scalars.String;
        content: $.scalars.String;
        category: $.Id<typeof Category>;
    }, typeof PublishedPost>;
    /**
     * Delete a post
     */
    static delete: import("@neuledge/engine").DeleteWithoutArgsMutationDefinition<typeof PublishedPost>;
}
export type $PublishedPost = $.Entity<typeof PublishedPost>;
export type Post = DraftPost | PublishedPost;
export declare const Post: $.Either<'Post', typeof DraftPost | typeof PublishedPost>;
export type $Post = $.Entity<typeof Post[number]>;
//# sourceMappingURL=states.codegen.d.ts.map