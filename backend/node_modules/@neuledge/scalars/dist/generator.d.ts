import { StoreValueShapeType } from '@neuledge/store';
import { ParametersType, Parameters } from './parameters';
import { Scalar } from './scalar';
export interface ScalarGenerator<P extends Parameters = Parameters, S extends Scalar = Scalar> {
    type: 'ScalarGenerator';
    name: string;
    description?: string;
    deprecated?: string | true;
    parameters: P;
    (args: ParametersType<P>): S;
}
export interface CallableScalar<P extends Parameters = any, // eslint-disable-line @typescript-eslint/no-explicit-any
Type = any, // eslint-disable-line @typescript-eslint/no-explicit-any
Input = Type, Value = Type, Encoding extends StoreValueShapeType<Value> = StoreValueShapeType<Value>> extends Scalar<Type, Input, Value, Encoding> {
    parameters: P;
    (args: ParametersType<P>): Scalar<Type, Input, Value>;
}
export declare const createScalarGenerator: <P extends Parameters, S extends Scalar<any, any, any, "string" | "number" | "boolean" | "json" | "binary" | "enum" | "date-time">>({ name, ...props }: Pick<ScalarGenerator<P, S>, keyof ScalarGenerator<P, S>>, generator: (args: ParametersType<P> | Record<string, never>, key: string) => S) => ScalarGenerator<P, S>;
export declare const createCallableScalar: <P extends Parameters, Type, Input, Value, Encoding extends StoreValueShapeType<Value>>(parameters: P, generator: (args: Record<string, never> | ParametersType<P>, key: string) => Scalar<Type, Input, Value, Encoding>) => CallableScalar<P, Type, Input, Value, Encoding>;
//# sourceMappingURL=generator.d.ts.map