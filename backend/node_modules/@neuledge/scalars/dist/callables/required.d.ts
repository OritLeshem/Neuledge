import { Callable } from '../callable';
export declare const Required: (<T>(args: {
    value?: T | null | undefined;
    message?: string | undefined | null;
}) => NonNullable<T>) & Callable<{
    value: {
        type: import("..").Scalar<unknown, unknown, unknown, "json">;
        nullable: boolean;
        generic: "T";
    };
    message: {
        type: import("..").CallableScalar<{
            min: {
                type: import("..").Scalar<number, number, number, "number">;
                nullable: true;
            };
            max: {
                type: import("..").Scalar<number, number, number, "number">;
                nullable: true;
            };
            trim: {
                type: import("..").Scalar<boolean, (true | 1 | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES") | (false | 0 | "false" | "no" | "False" | "No" | "FALSE" | "NO"), boolean, "boolean">;
                nullable: true;
            };
            lowercase: {
                type: import("..").Scalar<boolean, (true | 1 | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES") | (false | 0 | "false" | "no" | "False" | "No" | "FALSE" | "NO"), boolean, "boolean">;
                nullable: true;
            };
            uppercase: {
                type: import("..").Scalar<boolean, (true | 1 | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES") | (false | 0 | "false" | "no" | "False" | "No" | "FALSE" | "NO"), boolean, "boolean">;
                nullable: true;
            };
            normalize: {
                type: import("..").Scalar<boolean, (true | 1 | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES") | (false | 0 | "false" | "no" | "False" | "No" | "FALSE" | "NO"), boolean, "boolean">;
                nullable: true;
            };
            startsWith: {
                type: import("..").Scalar<string, string, string, "string" | "enum">;
                nullable: true;
            };
            endsWith: {
                type: import("..").Scalar<string, string, string, "string" | "enum">;
                nullable: true;
            };
            regex: {
                type: import("..").Scalar<string, string, string, "string" | "enum">;
                nullable: true;
            };
        }, string, string, string, "string" | "enum">;
        nullable: boolean;
    };
}, {
    type: import("..").Scalar<unknown, unknown, unknown, "json">;
    generic: "T";
}>;
//# sourceMappingURL=required.d.ts.map