import { Scalar } from '../scalar';
export type StringScalar = string;
export declare const StringScalar: import("../generator").CallableScalar<{
    min: {
        type: Scalar<number, number, number, "number">;
        nullable: true;
    };
    max: {
        type: Scalar<number, number, number, "number">;
        nullable: true;
    };
    trim: {
        type: Scalar<boolean, (true | 1 | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES") | (false | 0 | "false" | "no" | "False" | "No" | "FALSE" | "NO"), boolean, "boolean">;
        nullable: true;
    };
    lowercase: {
        type: Scalar<boolean, (true | 1 | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES") | (false | 0 | "false" | "no" | "False" | "No" | "FALSE" | "NO"), boolean, "boolean">;
        nullable: true;
    };
    uppercase: {
        type: Scalar<boolean, (true | 1 | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES") | (false | 0 | "false" | "no" | "False" | "No" | "FALSE" | "NO"), boolean, "boolean">;
        nullable: true;
    };
    normalize: {
        type: Scalar<boolean, (true | 1 | "true" | "yes" | "True" | "Yes" | "TRUE" | "YES") | (false | 0 | "false" | "no" | "False" | "No" | "FALSE" | "NO"), boolean, "boolean">;
        nullable: true;
    };
    startsWith: {
        type: Scalar<string, string, string, "string" | "enum">;
        nullable: true;
    };
    endsWith: {
        type: Scalar<string, string, string, "string" | "enum">;
        nullable: true;
    };
    regex: {
        type: Scalar<string, string, string, "string" | "enum">;
        nullable: true;
    };
}, string, string, string, "string" | "enum">;
//# sourceMappingURL=string.d.ts.map