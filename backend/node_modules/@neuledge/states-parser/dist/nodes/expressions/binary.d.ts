import { AbstractNode } from '../abstract';
import { ExpressionNode } from './expression';
declare const BinaryExpressionNodeOperators: {
    readonly '+': 1;
    readonly '-': 1;
    readonly '*': 1;
    readonly '/': 1;
    readonly '%': 1;
    readonly '**': 1;
    readonly '==': 1;
    readonly '!=': 1;
    readonly '===': 1;
    readonly '!==': 1;
    readonly '<': 1;
    readonly '<=': 1;
    readonly '>': 1;
    readonly '>=': 1;
};
export declare const isBinaryExpressionNodeOperator: (operator: string) => operator is "-" | "+" | "*" | "/" | "%" | "**" | "==" | "!=" | "===" | "!==" | "<" | "<=" | ">" | ">=";
export interface BinaryExpressionNode extends AbstractNode<'BinaryExpression'> {
    operator: keyof typeof BinaryExpressionNodeOperators;
    left: ExpressionNode;
    right: ExpressionNode;
}
export {};
//# sourceMappingURL=binary.d.ts.map