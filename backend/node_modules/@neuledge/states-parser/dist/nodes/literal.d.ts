import { TokenCursor } from "../tokens";
import { AbstractNode } from './abstract';
export interface LiteralNode<T extends LiteralValue = LiteralValue> extends AbstractNode<'Literal'> {
    value: T;
}
export type LiteralValue = string | number | boolean | null | LiteralValue[] | {
    [K in string]?: LiteralValue;
};
export declare const parseLiteralNode: <Value extends LiteralValue>(cursor: TokenCursor, parseValue?: (cursor: TokenCursor) => Value) => LiteralNode<Value>;
export declare const parseUInt8LiteralNode: (cursor: TokenCursor) => LiteralNode<number>;
//# sourceMappingURL=literal.d.ts.map