import { TokenCursor } from "../tokens";
import { AbstractNode } from './abstract';
import { ArgumentNode } from './argument';
import { IdentifierNode } from './identifier';
import { LiteralNode } from './literal';
export type TypeNode = TypeGeneratorNode | TypeExpressionNode;
export interface TypeGeneratorNode extends AbstractNode<'TypeGenerator'> {
    identifier: IdentifierNode;
    arguments: ArgumentNode<LiteralNode>[];
}
export interface TypeExpressionNode extends AbstractNode<'TypeExpression'> {
    identifier: IdentifierNode;
    list: boolean;
}
export declare const parseTypeNode: (cursor: TokenCursor) => TypeNode;
//# sourceMappingURL=type.d.ts.map